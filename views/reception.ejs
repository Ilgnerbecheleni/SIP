<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Recepção</title>
  <script src="/js/jssip.min.js"></script>
  <style>
    :root {
      --primary-color: #2c3e50;
      --secondary-color: #3498db;
      --accent-color: #e74c3c;
      --light-color: #ecf0f1;
      --dark-color: #2c3e50;
      --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--light-color);
      color: var(--dark-color);
      line-height: 1.6;
      padding: 20px;
      max-width: 800px;
      margin: 0 auto;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }
    
    .container {
      background-color: white;
      border-radius: 10px;
      padding: 30px;
      box-shadow: var(--shadow);
      text-align: center;
    }
    
    h1 {
      color: var(--primary-color);
      margin-bottom: 30px;
      font-size: 2rem;
      border-bottom: 2px solid var(--secondary-color);
      padding-bottom: 10px;
    }
    
    .buttons {
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-top: 30px;
      flex-wrap: wrap;
    }
    
    button {
      padding: 12px 24px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1rem;
      font-weight: 600;
      transition: all 0.3s ease;
      min-width: 150px;
    }
    
    button:focus {
      outline: none;
    }
    
    .call-btn {
      background-color: var(--secondary-color);
      color: white;
    }
    
    .call-btn:hover {
      background-color: #2980b9;
      transform: translateY(-2px);
      box-shadow: var(--shadow);
    }
    
    .hangup-btn {
      background-color: var(--accent-color);
      color: white;
    }
    
    .hangup-btn:hover {
      background-color: #c0392b;
      transform: translateY(-2px);
      box-shadow: var(--shadow);
    }
    
    .answer-btn {
      background-color: var(--secondary-color);
      color: white;
    }
    
    .answer-btn:hover {
      background-color: #2980b9;
      transform: translateY(-2px);
      box-shadow: var(--shadow);
    }
    
    .reject-btn {
      background-color: var(--accent-color);
      color: white;
    }
    
    .reject-btn:hover {
      background-color: #c0392b;
      transform: translateY(-2px);
      box-shadow: var(--shadow);
    }
    
    .status {
      margin-top: 20px;
      padding: 10px;
      border-radius: 5px;
      background-color: var(--light-color);
      display: none;
    }
    
    .status.active {
      display: block;
    }
    
    /* Estilos do Modal */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1000;
      justify-content: center;
      align-items: center;
    }
    
    .modal.active {
      display: flex;
    }
    
    .modal-content {
      background-color: white;
      border-radius: 10px;
      padding: 30px;
      width: 90%;
      max-width: 400px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
      text-align: center;
      position: relative;
    }
    
    .modal-header {
      margin-bottom: 20px;
      padding-bottom: 10px;
      border-bottom: 1px solid #eee;
    }
    
    .modal-title {
      font-size: 1.5rem;
      color: var(--primary-color);
    }
    
    .modal-body {
      margin-bottom: 20px;
    }
    
    .call-info {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin: 15px 0;
    }
    
    .call-status {
      font-weight: bold;
      color: var(--secondary-color);
    }
    
    .call-duration {
      font-size: 2rem;
      margin: 10px 0;
      font-weight: bold;
    }
    
    .call-target {
      background-color: var(--light-color);
      padding: 10px;
      border-radius: 5px;
      font-weight: bold;
    }
    
    .pulse {
      display: inline-block;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background-color: #27ae60;
      margin-right: 8px;
      animation: pulse 1.5s infinite;
    }
    
    .incoming-call-animation {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background-color: var(--secondary-color);
      margin: 0 auto 20px;
      display: flex;
      justify-content: center;
      align-items: center;
      animation: incoming-pulse 1s infinite alternate;
    }
    
    .incoming-call-animation i {
      font-size: 40px;
      color: white;
    }
    
    @keyframes incoming-pulse {
      0% {
        transform: scale(0.95);
        box-shadow: 0 0 0 0 rgba(52, 152, 219, 0.7);
      }
      100% {
        transform: scale(1.05);
        box-shadow: 0 0 0 15px rgba(52, 152, 219, 0);
      }
    }
    
    @keyframes pulse {
      0% {
        transform: scale(0.95);
        box-shadow: 0 0 0 0 rgba(39, 174, 96, 0.7);
      }
      70% {
        transform: scale(1);
        box-shadow: 0 0 0 10px rgba(39, 174, 96, 0);
      }
      100% {
        transform: scale(0.95);
        box-shadow: 0 0 0 0 rgba(39, 174, 96, 0);
      }
    }
    
    .incoming-call-buttons {
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-top: 20px;
    }
    
    @media (max-width: 480px) {
      body {
        padding: 10px;
      }
      
      .container {
        padding: 20px;
      }
      
      h1 {
        font-size: 1.5rem;
      }
      
      button {
        width: 100%;
      }
      
      .modal-content {
        width: 95%;
        padding: 20px;
      }
      
      .incoming-call-buttons {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Recepção (Ramal 1000)</h1>
    
    <div class="buttons">
      <button class="call-btn" onclick="callWithModal('1001')">Ligar para Quarto</button>
      <button class="hangup-btn" onclick="hangupWithModal()">Desligar</button>
    </div>
    
    <div id="callStatus" class="status"></div>
  </div>
  
  <!-- Modal de Chamada em Andamento -->
  <div id="callModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title">Chamada em Andamento</h2>
      </div>
      <div class="modal-body">
        <div class="call-info">
          <div class="call-status"><span class="pulse"></span>Conectado</div>
          <div class="call-duration" id="callDuration">00:00</div>
          <div class="call-target" id="callTarget">Quarto (Ramal 1001)</div>
        </div>
      </div>
      <button class="hangup-btn" onclick="hangupWithModal()">Encerrar Chamada</button>
    </div>
  </div>
  
  <!-- Modal de Chamada Recebida -->
  <div id="incomingCallModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title">Chamada Recebida</h2>
      </div>
      <div class="modal-body">
        <div class="incoming-call-animation">
          <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
          </svg>
        </div>
        <div class="call-info">
          <div class="call-target" id="incomingCallTarget">Quarto (Ramal 1001)</div>
          <div class="call-status">Chamando...</div>
        </div>
        <div class="incoming-call-buttons">
          <button class="answer-btn" onclick="answerCall()">Atender</button>
          <button class="reject-btn" onclick="rejectCall()">Rejeitar</button>
        </div>
      </div>
    </div>
  </div>
  
  <audio id="remoteAudio" autoplay></audio>
  <audio id="ringtone" loop>
    <source src="data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV" type="audio/mpeg">
  </audio>

  <script>
    // Variáveis para controle de chamadas
    let ua, session, incomingSession;
    let callTimer;
    let callStartTime;
    const modal = document.getElementById('callModal');
    const incomingCallModal = document.getElementById('incomingCallModal');
    const durationElement = document.getElementById('callDuration');
    const targetElement = document.getElementById('callTarget');
    const incomingCallTarget = document.getElementById('incomingCallTarget');
    const ringtone = document.getElementById('ringtone');
    
    // Função para inicializar o JsSIP (substitui a importação do sip.js)
    function initJsSIP({ uri, password, ws }) {
      const socket = new JsSIP.WebSocketInterface(ws);
      const configuration = {
        sockets: [socket],
        uri,
        password,
        session_timers: false
      };

      ua = new JsSIP.UA(configuration);
      
      // Intercepta o evento newRTCSession antes que o handler padrão seja chamado
      ua.on("newRTCSession", function (e) {
        session = e.session;

        if (e.originator === 'remote') {
          // Armazena a sessão de entrada, mas não atende automaticamente
          incomingSession = session;
          
          // Extrai informações do chamador
          const fromNumber = session.remote_identity.uri.user;
          if (fromNumber === '1001') {
            incomingCallTarget.textContent = 'Quarto (Ramal 1001)';
          } else {
            incomingCallTarget.textContent = `Ramal ${fromNumber}`;
          }
          
          // Mostra o modal de chamada recebida
          incomingCallModal.classList.add('active');
          
          // Toca o ringtone
          ringtone.play().catch(e => console.log('Erro ao tocar ringtone:', e));
          
          // Configura handlers para quando a chamada terminar
          session.on("ended", handleCallEnded);
          session.on("failed", handleCallEnded);
          
          // Impede que o handler padrão atenda automaticamente
          e.preventDefault();
          return false;
        }

        // Para chamadas de saída, configura o handler de stream
        session.connection.addEventListener('addstream', function (e) {
          const remoteAudio = document.getElementById("remoteAudio");
          remoteAudio.srcObject = e.stream;
        });

        session.on("ended", handleCallEnded);
        session.on("failed", handleCallEnded);
      });
      
      ua.start();
    }
    
    // Função para atender a chamada
    function answerCall() {
      if (incomingSession) {
        // Para o ringtone
        ringtone.pause();
        ringtone.currentTime = 0;
        
        // Esconde o modal de chamada recebida
        incomingCallModal.classList.remove('active');
        
        // Atende a chamada
        incomingSession.answer({ mediaConstraints: { audio: true, video: false } });
        
        // Configura o handler de stream
        incomingSession.connection.addEventListener('addstream', function (e) {
          const remoteAudio = document.getElementById("remoteAudio");
          remoteAudio.srcObject = e.stream;
        });
        
        // Mostra o modal de chamada em andamento
        const fromNumber = incomingSession.remote_identity.uri.user;
        if (fromNumber === '1001') {
          targetElement.textContent = 'Quarto (Ramal 1001)';
        } else {
          targetElement.textContent = `Ramal ${fromNumber}`;
        }
        
        modal.classList.add('active');
        
        // Inicia o timer
        callStartTime = new Date();
        updateCallDuration();
        callTimer = setInterval(updateCallDuration, 1000);
        
        // Limpa a referência à sessão de entrada
        session = incomingSession;
        incomingSession = null;
      }
    }
    
    // Função para rejeitar a chamada
    function rejectCall() {
      if (incomingSession) {
        // Para o ringtone
        ringtone.pause();
        ringtone.currentTime = 0;
        
        // Esconde o modal de chamada recebida
        incomingCallModal.classList.remove('active');
        
        // Rejeita a chamada
        incomingSession.terminate();
        
        // Limpa a referência à sessão de entrada
        incomingSession = null;
      }
    }
    
    // Função para lidar com o fim da chamada
    function handleCallEnded() {
      // Se for uma chamada recebida que ainda não foi atendida
      if (incomingCallModal.classList.contains('active')) {
        ringtone.pause();
        ringtone.currentTime = 0;
        incomingCallModal.classList.remove('active');
        incomingSession = null;
      }
      
      // Se for uma chamada em andamento
      if (modal.classList.contains('active')) {
        modal.classList.remove('active');
        
        // Para o timer
        if (callTimer) {
          clearInterval(callTimer);
          callTimer = null;
        }
      }
      
      session = null;
    }
    
    // Função para chamar com modal
    function callWithModal(target) {
      if (!ua) return;
      
      // Faz a chamada
      session = ua.call(`sip:${target}@webrtc.jobsconnect.com.br`, {
        mediaConstraints: { audio: true, video: false }
      });
      
      // Configura o modal
      if (target === '1001') {
        targetElement.textContent = 'Quarto (Ramal 1001)';
      } else {
        targetElement.textContent = `Ramal ${target}`;
      }
      
      // Mostra o modal
      modal.classList.add('active');
      
      // Inicia o timer
      callStartTime = new Date();
      updateCallDuration();
      callTimer = setInterval(updateCallDuration, 1000);
    }
    
    // Função para desligar com modal
    function hangupWithModal() {
      if (session) {
        session.terminate();
      }
      
      // Esconde o modal
      modal.classList.remove('active');
      
      // Para o timer
      if (callTimer) {
        clearInterval(callTimer);
        callTimer = null;
      }
    }
    
    // Função para atualizar a duração da chamada
    function updateCallDuration() {
      if (!callStartTime) return;
      
      const now = new Date();
      const diff = now - callStartTime;
      const minutes = Math.floor(diff / 60000);
      const seconds = Math.floor((diff % 60000) / 1000);
      
      durationElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    // Inicializa o JsSIP
    initJsSIP({
      uri: "sip:1000@webrtc.jobsconnect.com.br",
      password: "senha1000",
      ws: "wss://webrtc.jobsconnect.com.br:8089/ws"
    });
  </script>
</body>
</html>
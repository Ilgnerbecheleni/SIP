<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quarto - WebRTC SIP</title>
  <link rel="stylesheet" href="styles.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
</head>
<body class="room">
  <div class="container">
    <div class="room-panel">
      <div class="header">
        <h1>Quarto</h1>
        <div class="extension">Ramal 1001</div>
      </div>
      
      <div class="status-panel">
        <div class="status-indicator">
          <div class="status-dot"></div>
          <p>Status: <span id="status" class="status-text">Aguardando...</span></p>
        </div>
      </div>
      
      <div class="control-panel">
        <button class="call-btn primary-btn" onclick="makeCall()">
          <span class="btn-icon">ðŸ“ž</span> Ligar para RecepÃ§Ã£o 1000
        </button>
        <button id="answerBtn" class="answer-btn action-btn" style="display:none;" onclick="answerCall()">
          <span class="btn-icon">âœ“</span> Atender
        </button>
        <button id="rejectBtn" class="reject-btn action-btn" style="display:none;" onclick="rejectCall()">
          <span class="btn-icon">âœ—</span> Rejeitar
        </button>
        <button id="endBtn" class="end-btn action-btn" style="display:none;" onclick="endCall()">
          <span class="btn-icon">ðŸ”š</span> Finalizar Chamada
        </button>
      </div>
    </div>
  </div>
  
  <audio id="remoteAudio" autoplay></audio>

  <script src="jssip.min.js"></script>
  <script>
    const socket = new JsSIP.WebSocketInterface('wss://webrtc.jobsconnect.com.br:8089/ws');
    const configuration = {
      sockets: [socket],
      uri: 'sip:1001@webrtc.jobsconnect.com.br',
      password: 'senha1001'
    };

    const ua = new JsSIP.UA(configuration);
    ua.start();

    let session = null;

    function makeCall() {
      const eventHandlers = {
        'progress': () => updateStatus("Chamada em progresso...", "calling"),
        'failed': e => updateStatus("Chamada falhou", "failed"),
        'ended': () => updateStatus("Chamada encerrada", "ended"),
        'confirmed': () => updateStatus("Chamada confirmada", "confirmed")
      };

      const options = {
        eventHandlers,
        mediaConstraints: { audio: true, video: false },
        rtcOfferConstraints: { offerToReceiveAudio: 1 }
      };

      session = ua.call('sip:1001@webrtc.jobsconnect.com.br', {
  eventHandlers,
  mediaConstraints: { audio: true, video: false },
  rtcOfferConstraints: { offerToReceiveAudio: 1 },
  pcConfig: {
    iceServers: [{ urls: ['stun:stun.l.google.com:19302'] }]
  }
});

      session.connection.addEventListener("addstream", function(e) {
        document.getElementById('remoteAudio').srcObject = e.stream;
      });
    }

    ua.on('newRTCSession', function(e) {
      if (e.originator === 'remote') {
        session = e.session;
        updateStatus("Chamada recebida!", "incoming");
        showButtons();

        session.on('ended', () => {
          updateStatus("Chamada encerrada.", "ended");
          hideButtons();
        });
        
        session.on('failed', () => {
          updateStatus("Chamada falhou ou foi rejeitada.", "failed");
          hideButtons();
        });
        
        session.on('accepted', () => {
          updateStatus("Chamada ativa.", "active");
          document.getElementById("endBtn").style.display = "inline-block";
        });

        session.connection.addEventListener("addstream", function(e) {
          document.getElementById('remoteAudio').srcObject = e.stream;
        });
      }
    });

    function answerCall() {
  session.answer({
    mediaConstraints: { audio: true, video: false },
    rtcOfferConstraints: { offerToReceiveAudio: 1 },
    pcConfig: {
      iceServers: [{ urls: ['stun:stun.l.google.com:19302'] }]
    }
  });
}
    function rejectCall() {
      session.terminate();
    }

    function updateStatus(text, state) {
      const statusElement = document.getElementById("status");
      statusElement.innerText = text;
      
      // Remove all state classes
      statusElement.classList.remove("status-waiting", "status-calling", "status-incoming", "status-active", "status-ended", "status-failed", "status-confirmed");
      
      // Add appropriate state class
      if (state) {
        statusElement.classList.add("status-" + state);
      } else {
        statusElement.classList.add("status-waiting");
      }
      
      // Update status dot
      const statusDot = document.querySelector(".status-dot");
      statusDot.className = "status-dot";
      if (state) {
        statusDot.classList.add("status-dot-" + state);
      } else {
        statusDot.classList.add("status-dot-waiting");
      }
      
      if (state !== "incoming") {
        hideButtons();
      }
    }

    function showButtons() {
      document.getElementById("answerBtn").style.display = "inline-block";
      document.getElementById("rejectBtn").style.display = "inline-block";
    }

    function hideButtons() {
      document.getElementById("answerBtn").style.display = "none";
      document.getElementById("rejectBtn").style.display = "none";
    }

    function endCall() {
      if (session) {
        session.terminate();
        updateStatus("Chamada encerrada pelo usuÃ¡rio.", "ended");
        document.getElementById("endBtn").style.display = "none";
      }
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ramal 6002</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .modal-overlay {
      position: fixed; top: 0; left: 0; width: 100%; height: 100%;
      background: rgba(0, 0, 0, 0.5); display: none; align-items: center; justify-content: center;
      z-index: 9999;
    }
    .modal-overlay.show {
      display: flex !important;
    }
    .modal-content {
      background: white; padding: 2rem; border-radius: 1rem; text-align: center;
    }
    #alertaChamada {
      position: fixed;
      top: 10px;
      right: 10px;
      z-index: 9999;
    }
  </style>
</head>
<body class="bg-light">
<div class="container py-5">
  <h1 class="mb-4">Ramal 6002</h1>
  <div class="mb-3">
    <button class="btn btn-success" onclick="connectUA()">Conectar</button>
    <button class="btn btn-secondary" onclick="disconnectUA()">Desconectar</button>
    <button class="btn btn-primary" onclick="call()">Ligar para 6001</button>
    <button class="btn btn-danger" onclick="hangup()">Desligar</button>
  </div>
  <div><strong>Status:</strong> <span id="status">Desconectado</span></div>
  <audio id="remoteAudio" class="mt-3 w-100" autoplay></audio>
</div>

<div id="modalChamada" class="modal-overlay">
  <div class="modal-content">
    <h4>ðŸ“ž Chamada recebida</h4>
    <button class="btn btn-success mt-2" onclick="atender()">Atender</button>
    <button class="btn btn-secondary mt-2" onclick="recusar()">Recusar</button>
  </div>
</div>

<div id="alertaChamada" class="alert alert-warning" style="display:none;">
  ðŸ“ž LigaÃ§Ã£o recebida de <span id="fromUser"></span>
</div>

<script src="/jssip.min.js"></script>
<script>
  const user = '6002';
  const pass = 'senha6002';
  const dest = '6001';
  let ua = null;
  let session = null;

  function connectUA() {
    const socket = new JsSIP.WebSocketInterface('wss://webrtc.jobsconnect.com.br:8089/ws');
    const configuration = {
      sockets: [socket],
      uri: `sip:${user}@webrtc.jobsconnect.com.br`,
      password: pass,
      session_timers: false,
      register: true
    };

    ua = new JsSIP.UA(configuration);

    ua.on('registered', () => {
      document.getElementById('status').textContent = 'Registrado';
      console.log('SIP registrado com sucesso');
    });
    
    ua.on('unregistered', () => {
      document.getElementById('status').textContent = 'NÃ£o registrado';
      console.log('SIP nÃ£o registrado');
    });
    
    ua.on('registrationFailed', e => {
      document.getElementById('status').textContent = 'Falha: ' + e.cause;
      console.error('Falha no registro SIP:', e.cause);
    });

    ua.on('newRTCSession', e => {
      console.log('Nova sessÃ£o RTC:', e);
      
      // Limpa qualquer sessÃ£o anterior
      if (session) {
        console.log('Limpando sessÃ£o anterior');
        // Remover listeners da sessÃ£o anterior se necessÃ¡rio
      }
      
      session = e.session;

      // Configurar todos os event listeners da sessÃ£o
      session.on('progress', () => {
        console.log('Chamada em progresso');
      });
      
      session.on('accepted', () => {
        console.log('Chamada aceita');
        document.getElementById('modalChamada').classList.remove('show');
        document.getElementById('alertaChamada').style.display = 'none';
      });
      
      session.on('confirmed', () => {
        console.log('Chamada confirmada');
      });
      
      session.on('failed', e => {
        console.log('Chamada falhou:', e);
        document.getElementById('modalChamada').classList.remove('show');
        document.getElementById('alertaChamada').style.display = 'none';
      });

      session.on('ended', () => {
        console.log('Chamada encerrada');
        document.getElementById('modalChamada').classList.remove('show');
        document.getElementById('alertaChamada').style.display = 'none';
      });

      // Se for uma chamada recebida
      if (e.originator === 'remote') {
        console.log('Chamada recebida');
        const from = session.remote_identity.uri.user;
        document.getElementById('fromUser').textContent = from;
        document.getElementById('alertaChamada').style.display = 'block';
        
        // Mostrar o modal imediatamente para chamadas recebidas
        document.getElementById('modalChamada').classList.add('show');
      }

      // Configurar Ã¡udio da chamada
      session.connection.addEventListener('track', e => {
        console.log('Faixa de Ã¡udio recebida:', e);
        document.getElementById('remoteAudio').srcObject = e.streams[0];
      });
    });

    // Iniciar o UA
    ua.start();
    console.log('UA iniciado');
  }

  function disconnectUA() {
    if (ua) {
      ua.stop();
      document.getElementById('status').textContent = 'Desconectado';
      console.log('UA desconectado');
    }
  }

  function call() {
    if (!ua || ua.isRegistered() === false) {
      alert("NÃ£o conectado");
      return;
    }
    
    console.log(`Ligando para ${dest}...`);
    session = ua.call(`sip:${dest}@webrtc.jobsconnect.com.br`, {
      mediaConstraints: { audio: true, video: false },
      rtcOfferConstraints: { offerToReceiveAudio: 1, offerToReceiveVideo: 0 }
    });
  }

  function atender() {
    console.log('Atendendo chamada...');
    if (session) {
      session.answer({
        mediaConstraints: { audio: true, video: false }
      });
      document.getElementById('modalChamada').classList.remove('show');
      document.getElementById('alertaChamada').style.display = 'none';
    } else {
      console.error('Nenhuma sessÃ£o disponÃ­vel para atender');
    }
  }

  function recusar() {
    console.log('Recusando chamada...');
    if (session) {
      session.terminate();
    }
    document.getElementById('modalChamada').classList.remove('show');
    document.getElementById('alertaChamada').style.display = 'none';
  }

  function hangup() {
    console.log('Desligando chamada...');
    if (session) {
      session.terminate();
    }
  }
</script>
</body>
</html>
<!DOCTYPE html>
<html>
<head>
  <title>Ramal 2000</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 40px;
    }
    #controls {
      margin: 20px 0;
    }
    button {
      padding: 10px 20px;
      margin: 5px;
      background-color: #28a745;
      color: white;
      border: none;
      border-radius: 4px;
    }
    #status {
      color: #28a745;
      font-weight: bold;
    }
    #remoteVideo {
      width: 640px;
      height: 480px;
      background-color: #f0f0f0;
      margin: 20px 0;
    }
  </style>
</head>
<body>
  <h1>Ramal 2000</h1>
  <p>Status: <span id="status">Desconectado</span></p>
  
  <div id="controls">
    <button id="connect">Conectar</button>
    <button id="disconnect" disabled>Desconectar</button>
    <input type="text" id="number" value="1000" placeholder="Digite o nÃºmero">
    <button id="call" disabled>Ligar</button>
    <button id="hangup" disabled>Desligar</button>
  </div>
  
  <div>
    <video id="remoteVideo" autoplay></video>
  </div>
  
  <script src="/js/jssip.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      let ua;
      let session;
      const domain = 'webrtc.jobsconnect.com.br';
      
      const statusElem = document.getElementById('status');
      const connectBtn = document.getElementById('connect');
      const disconnectBtn = document.getElementById('disconnect');
      const callBtn = document.getElementById('call');
      const hangupBtn = document.getElementById('hangup');
      const numberInput = document.getElementById('number');
      const remoteVideo = document.getElementById('remoteVideo');
      
      connectBtn.addEventListener('click', () => {
        const socket = new JsSIP.WebSocketInterface(`wss://${domain}:8089/ws`);
        const configuration = {
          sockets: [socket],
          uri: `sip:2000@${domain}`,
          password: 'senha2000',
          display_name: 'Ramal 2000'
        };
        
        ua = new JsSIP.UA(configuration);
        
        ua.on('connected', () => {
          statusElem.textContent = 'Conectado ao Asterisk';
          connectBtn.disabled = true;
          disconnectBtn.disabled = false;
          callBtn.disabled = false;
        });
        
        ua.on('disconnected', () => {
          statusElem.textContent = 'Desconectado';
          connectBtn.disabled = false;
          disconnectBtn.disabled = true;
          callBtn.disabled = true;
          hangupBtn.disabled = true;
        });
        
        ua.on('registered', () => {
          statusElem.textContent = 'Registrado como Ramal 2000';
        });
        
        ua.on('newRTCSession', (data) => {
          session = data.session;
          
          if (session.direction === 'incoming') {
            statusElem.textContent = `Chamada recebida de ${session.remote_identity.uri.user}`;
            session.answer({
              mediaConstraints: { audio: true, video: true }
            });
          }
          
          session.on('confirmed', () => {
            statusElem.textContent = 'Chamada em andamento';
            hangupBtn.disabled = false;
            callBtn.disabled = true;
          });
          
          session.on('ended', () => {
            statusElem.textContent = 'Chamada finalizada';
            hangupBtn.disabled = true;
            callBtn.disabled = false;
          });
          
          session.on('failed', () => {
            statusElem.textContent = 'Chamada falhou';
            hangupBtn.disabled = true;
            callBtn.disabled = false;
          });
          
          session.connection.addEventListener('addstream', (e) => {
            remoteVideo.srcObject = e.stream;
          });
        });
        
        ua.start();
      });
      
      disconnectBtn.addEventListener('click', () => {
        if (ua) {
          ua.stop();
        }
      });
      
      callBtn.addEventListener('click', () => {
        const number = numberInput.value;
        if (number && ua) {
          statusElem.textContent = `Ligando para ${number}...`;
          const options = {
            mediaConstraints: { audio: true, video: true }
          };
          session = ua.call(`sip:${number}@${domain}`, options);
        }
      });
      
      hangupBtn.addEventListener('click', () => {
        if (session) {
          session.terminate();
        }
      });
    });
  </script>
</body>
</html>
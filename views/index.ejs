<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>RecepÃ§Ã£o - WebRTC SIP</title>
  <link rel="stylesheet" href="styles.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
</head>
<body class="reception">
  <div class="container">
    <div class="reception-desk">
      <div class="header">
        <h1>RecepÃ§Ã£o</h1>
        <div class="extension">Ramal 1000</div>
      </div>
      
      <div class="status-panel">
        <div class="status-indicator">
          <div class="status-dot"></div>
          <p>Status: <span id="status" class="status-text">Aguardando...</span></p>
        </div>
      </div>
      
      <div class="control-panel">
        <button class="call-btn primary-btn" onclick="makeCall()">
          <span class="btn-icon">ðŸ“ž</span> Ligar para Quarto 1001
        </button>
        <button id="answerBtn" class="answer-btn action-btn" style="display:none;" onclick="answerCall()">
          <span class="btn-icon">âœ“</span> Atender
        </button>
        <button id="rejectBtn" class="reject-btn action-btn" style="display:none;" onclick="rejectCall()">
          <span class="btn-icon">âœ—</span> Rejeitar
        </button>
        <button id="endBtn" class="end-btn action-btn" style="display:none;" onclick="endCall()">
          <span class="btn-icon">ðŸ”š</span> Finalizar Chamada
        </button>
      </div>
    </div>
  </div>
  
  <audio id="remoteAudio" autoplay></audio>

  <script src="jssip.min.js"></script>
<script>
  const socket = new JsSIP.WebSocketInterface('wss://webrtc.jobsconnect.com.br:8089/ws');
  const configuration = {
  sockets: [socket],
  uri: 'sip:1000@webrtc.jobsconnect.com.br',
  password: 'senha1000',
  register: true,
  instance_id: generateUUID(),
  reg_id: 1,
  connection_recovery_min_interval: 2,
  connection_recovery_max_interval: 30
};

  const ua = new JsSIP.UA(configuration);
  ua.start();


  function generateUUID() {
  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  );
}

  let session = null;

  function makeCall() {
    const eventHandlers = {
      'progress': () => updateStatus("Chamada em progresso...", "calling"),
      'failed': () => updateStatus("Chamada falhou", "failed"),
      'ended': () => updateStatus("Chamada encerrada", "ended"),
      'confirmed': () => {
        updateStatus("Chamada ativa", "active");
        showButton("endBtn");
      }
    };

    session = ua.call('sip:1001@webrtc.jobsconnect.com.br', {
      eventHandlers,
      mediaConstraints: { audio: true, video: false },
      rtcOfferConstraints: { offerToReceiveAudio: 1 },
      pcConfig: {
        iceServers: [{ urls: ['stun:stun.l.google.com:19302'] }]
      }
    });

    session.connection.addEventListener("addstream", function (e) {
      document.getElementById('remoteAudio').srcObject = e.stream;
    });
  }

  ua.on('newRTCSession', function(e) {
    if (e.originator === 'remote') {
      session = e.session;
      updateStatus("Chamada recebida!", "incoming");
      showButton("answerBtn");
      showButton("rejectBtn");

      session.on('ended', () => {
        updateStatus("Chamada encerrada", "ended");
        hideAllButtons();
      });

      session.on('failed', () => {
        updateStatus("Chamada falhou ou foi rejeitada", "failed");
        hideAllButtons();
      });

      session.on('accepted', () => {
        updateStatus("Chamada ativa", "active");
        hideButton("answerBtn");
        hideButton("rejectBtn");
        showButton("endBtn");
      });

      session.connection.addEventListener("addstream", function (e) {
        document.getElementById('remoteAudio').srcObject = e.stream;
      });
    }
  });

  function answerCall() {
    session.answer({
      mediaConstraints: { audio: true, video: false },
      rtcOfferConstraints: { offerToReceiveAudio: 1 },
      pcConfig: {
        iceServers: [{ urls: ['stun:stun.l.google.com:19302'] }]
      }
    });

    hideButton("answerBtn");
    hideButton("rejectBtn");
    showButton("endBtn");
  }

  function rejectCall() {
    if (session) {
      session.terminate();
      updateStatus("Chamada rejeitada", "failed");
      hideAllButtons();
    }
  }

  function endCall() {
    if (session) {
      session.terminate();
      updateStatus("Chamada encerrada pelo usuÃ¡rio", "ended");
      hideAllButtons();
    }
  }

  function updateStatus(text, state) {
    const statusText = document.getElementById("status");
    const statusDot = document.querySelector(".status-dot");

    statusText.innerText = text;

    const allStates = ["waiting", "calling", "incoming", "active", "ended", "failed"];
    allStates.forEach(s => {
      statusText.classList.remove("status-" + s);
      statusDot.classList.remove("status-dot-" + s);
    });

    if (state) {
      statusText.classList.add("status-" + state);
      statusDot.classList.add("status-dot-" + state);
    } else {
      statusText.classList.add("status-waiting");
      statusDot.classList.add("status-dot-waiting");
    }
  }

  function showButton(id) {
    document.getElementById(id).style.display = "inline-block";
  }

  function hideButton(id) {
    document.getElementById(id).style.display = "none";
  }

  function hideAllButtons() {
    ["answerBtn", "rejectBtn", "endBtn"].forEach(hideButton);
  }
</script>
  
</body>
</html>

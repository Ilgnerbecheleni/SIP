<!DOCTYPE html>
<html>
<head>
  <title>Ramal 1000</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 40px;
    }
    #controls {
      margin: 20px 0;
    }
    button {
      padding: 10px 20px;
      margin: 5px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 4px;
    }
    #answer {
      display: none;
      background-color: #ffc107;
    }
    #status {
      color: #007bff;
      font-weight: bold;
    }
    #debug {
      font-family: monospace;
      background-color: #f5f5f5;
      padding: 10px;
      border: 1px solid #ddd;
      height: 200px;
      overflow-y: auto;
      margin-top: 20px;
    }
  </style>
  <script src="/js/jssip.min.js"></script>
</head>
<body>
  <h1>Ramal 1000</h1>
  <p>Status: <span id="status">Desconectado</span></p>

  <div id="controls">
    <button id="connect">Conectar</button>
    <button id="disconnect" disabled>Desconectar</button>
    <input type="text" id="number" value="2000" placeholder="Digite o número">
    <button id="call" disabled>Ligar</button>
    <button id="answer">Atender</button>
    <button id="hangup" disabled>Desligar</button>
  </div>

  <div>
    <h3>Debug Info:</h3>
    <div id="debug"></div>
  </div>

  <script>
    function log(message) {
      const debug = document.getElementById('debug');
      const timestamp = new Date().toLocaleTimeString();
      debug.innerHTML += `<div>[${timestamp}] ${message}</div>`;
      debug.scrollTop = debug.scrollHeight;
      console.log(`[${timestamp}] ${message}`);
    }

    document.addEventListener('DOMContentLoaded', () => {
      let ua, session;
      let incomingSession = null;
      const domain = 'webrtc.jobsconnect.com.br';

      const statusElem = document.getElementById('status');
      const connectBtn = document.getElementById('connect');
      const disconnectBtn = document.getElementById('disconnect');
      const callBtn = document.getElementById('call');
      const hangupBtn = document.getElementById('hangup');
      const answerBtn = document.getElementById('answer');
      const numberInput = document.getElementById('number');

      connectBtn.addEventListener('click', () => {
        const socket = new JsSIP.WebSocketInterface(`wss://${domain}:8089/ws`);
        const configuration = {
          sockets: [socket],
          uri: `sip:1000@${domain}`,
          password: 'senha1000',
          display_name: 'Ramal 1000',
          register: true
        };

        ua = new JsSIP.UA(configuration);

        ua.on('connected', () => {
          log('Conectado ao servidor SIP');
          statusElem.textContent = 'Conectado';
          connectBtn.disabled = true;
          disconnectBtn.disabled = false;
          callBtn.disabled = false;
        });

        ua.on('disconnected', () => {
          log('Desconectado do servidor SIP');
          statusElem.textContent = 'Desconectado';
          connectBtn.disabled = false;
          disconnectBtn.disabled = true;
          callBtn.disabled = true;
          hangupBtn.disabled = true;
        });

        ua.on('registered', () => {
          log('Registrado com sucesso como 1000');
          statusElem.textContent = 'Registrado como Ramal 1000';
        });

        ua.on('newRTCSession', (data) => {
          session = data.session;

          session.on('confirmed', () => {
            log('Chamada confirmada');
            statusElem.textContent = 'Chamada em andamento';
            hangupBtn.disabled = false;
            callBtn.disabled = true;
            answerBtn.style.display = 'none';
          });

          session.on('ended', () => {
            log('Chamada finalizada');
            statusElem.textContent = 'Chamada encerrada';
            hangupBtn.disabled = true;
            callBtn.disabled = false;
          });

          session.on('failed', (e) => {
            log(`Chamada falhou: ${e.cause}`);
            statusElem.textContent = 'Chamada falhou';
            hangupBtn.disabled = true;
            callBtn.disabled = false;
            answerBtn.style.display = 'none';
          });

          session.connection.ontrack = (e) => {
            log('Recebendo stream de áudio');
            const audio = new Audio();
            audio.srcObject = e.streams[0];
            audio.play();
          };

          if (session.direction === 'incoming') {
            log(`Chamada recebida de ${session.remote_identity.uri.user}`);
            incomingSession = session;
            statusElem.textContent = `Chamada de ${session.remote_identity.uri.user}`;
            answerBtn.style.display = 'inline-block';
          }
        });

        ua.start();
      });

      disconnectBtn.addEventListener('click', () => {
        if (ua) ua.stop();
      });

      callBtn.addEventListener('click', async () => {
        try {
          await navigator.mediaDevices.getUserMedia({ audio: true });
          const number = numberInput.value;
          log(`Ligando para ${number}@${domain}`);
          const options = {
            mediaConstraints: { audio: true, video: false },
            pcConfig: {
              iceServers: [{ urls: ['stun:stun.l.google.com:19302'] }]
            }
          };
          session = ua.call(`sip:${number}@${domain}`, options);
        } catch (err) {
          log("Erro ao acessar microfone: " + err.message);
        }
      });

      hangupBtn.addEventListener('click', () => {
        if (session) session.terminate();
      });

      answerBtn.addEventListener('click', async () => {
        try {
          await navigator.mediaDevices.getUserMedia({ audio: true });
          if (incomingSession) {
            incomingSession.answer({ mediaConstraints: { audio: true, video: false } });
          }
        } catch (err) {
          log("Erro ao tentar responder: " + err.message);
        }
      });
    });
  </script>
</body>
</html>
